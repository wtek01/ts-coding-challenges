import Queue from "bull";
import { config } from "../../../config/environments";

/**
 * G√®re une file d'attente de jobs persistante avec Redis/Bull
 * Permet l'ex√©cution de jobs en parall√®le avec gestion des priorit√©s
 */
export class PersistentRedisJobQueue {
  /** Instance de la queue Bull connect√©e √† Redis */
  private queue!: Queue.Queue;

  /**
   * Initialise la queue Redis et configure le worker
   * @param maxRetries Nombre maximum de tentatives en cas d'√©chec
   */
  constructor(private maxRetries = config.jobQueue.maxRetries) {
    this.initializeQueue();
    this.setupWorker();
    this.setupEventListeners();
  }

  /**
   * Initialise la connexion √† Redis et cr√©e la queue
   * @throws Error si la connexion √† Redis √©choue
   */
  private initializeQueue() {
    try {
      this.queue = new Queue("job-queue", {
        redis: config.redis,
      });
    } catch (error) {
      console.error("‚ùå Failed to initialize Redis queue:", error);
      throw error;
    }
  }

  /**
   * Configure le worker qui traite les jobs
   * D√©finit la logique de traitement avec gestion de la concurrence
   */
  private setupWorker() {
    this.queue.process(config.jobQueue.concurrency, async (job) => {
      try {
        console.log(`üöÄ Processing ${job.id}: ${job.data.description}`);

        // Simule un traitement asynchrone
        await new Promise((resolve) =>
          setTimeout(() => {
            console.log(
              `‚öôÔ∏è ${job.data.description} executing... (Duration: ${job.data.duration}ms)`
            );
            resolve(null);
          }, job.data.duration)
        );

        console.log(`‚úÖ Job ${job.id} completed successfully`);
      } catch (error) {
        console.error(`‚ùå Error processing job ${job.id}:`, error);
        throw error; // Propage l'erreur pour la gestion des retries
      }
    });
  }

  /**
   * Configure les listeners pour suivre l'√©tat des jobs
   * G√®re les √©v√©nements completed, failed et error
   */
  private setupEventListeners() {
    // Job termin√© avec succ√®s
    this.queue.on("completed", (job) => {
      console.log(`üìä Job ${job.id} completed successfully`);
    });

    // Job √©chou√© - gestion des retries
    this.queue.on("failed", async (job, err) => {
      console.log(`‚ùå Job ${job.id} failed: ${err.message}`);
      if (job.attemptsMade < this.maxRetries) {
        console.log(`üîÑ Retrying ${job.id} (Attempt ${job.attemptsMade + 1})`);
        await job.retry();
      } else {
        console.log(`üö® Job ${job.id} permanently failed`);
      }
    });

    // Erreur au niveau de la queue
    this.queue.on("error", (error) => {
      console.error("üö® Queue error:", error);
    });
  }

  /**
   * Ajoute un nouveau job √† la queue
   * @param duration Dur√©e d'ex√©cution simul√©e en ms
   * @param priority Priorit√© du job (plus petit nombre = plus prioritaire)
   * @returns Le job cr√©√©
   * @throws Error si l'ajout √©choue
   */
  async addJob(duration: number, priority: number = 0) {
    try {
      const job = await this.queue.add(
        {
          description: `Job with priority ${priority}`,
          duration: duration,
        },
        {
          priority,
          attempts: this.maxRetries,
          removeOnComplete: true,
        }
      );

      // Attendre que le job soit termin√©
      await job.finished();

      return job;
    } catch (error) {
      console.error("‚ùå Error adding job:", error);
      throw error;
    }
  }

  /**
   * Ferme proprement la connexion √† Redis
   * Important d'appeler cette m√©thode avant de terminer le programme
   * @throws Error si la fermeture √©choue
   */
  async close() {
    try {
      await this.queue.close();
      console.log("üëã Queue closed properly");
    } catch (error) {
      console.error("‚ùå Error closing queue:", error);
      throw error;
    }
  }
}
